group 'net.java.jinput'
version '1.0.0'

apply plugin: 'java'
apply plugin: 'c'

model {
    platforms {
        x86 {
            architecture "x86"
        }
        x64 {
            architecture "x64"
        }
        itanium {
            architecture "ia-64"
        }
    }

    components {
        libjinput_windows(NativeLibrarySpec) {
            targetPlatform "x86"
            targetPlatform "x64"

            sources {
                c.source.srcDirs 'src/main/native'
                c.source.include '**/*.c'
                c.lib project: ":plugins:common", library: 'libjinput_common', linkage: 'static'
            }

            binaries {
                all {
                    cCompiler.args "-I${project(':plugins:common').projectDir}${File.separator}src${File.separator}main${File.separator}native"
                    def javaInclude = "-I${System.properties.'java.home'}${File.separator}..${File.separator}include"
                    cCompiler.args javaInclude
                    cCompiler.args "${javaInclude}${File.separator}win32"
                    String generated = "-I${buildDir}${File.separator}generated${File.separator}includes"
                    cCompiler.args generated
                    linker.args "/LIBPATH:${System.properties.'java.home'}${File.separator}..${File.separator}lib"
                    //println cCompiler.args
                    linker.args "User32.lib"
                    linker.args "SetupApi.lib"
                    linker.args "dxguid.lib"
                    linker.args "dinput8.lib"
                }
            }
        }
    }
}

task javah {
    String[] files = ["DummyWindow", "IDirectInputEffect", "IDirectInput", "IDirectInputDevice",
                      "RawInputEnvironmentPlugin", "RawInputEventQueue", "RawDevice"]
    inputs.file sourceSets.main.output.asFileTree.matching {
       for (String file : files) {
           include file
       }
    }

    outputs.file "${buildDir}/generated/includes/net_java_games_input_DummyWindow.h"
    doLast {
        String[] files2 = ["DummyWindow", "IDirectInputEffect", "IDirectInput", "IDirectInputDevice", "RawInputEnvironmentPlugin", "RawInputEventQueue", "RawDevice"]
        for (String file : files2) {
            println file
            ant.javah(class: "net.java.games.input.${file}", outputFile: "${buildDir}/generated/includes/net_java_games_input_${file}.h", classpath: "${buildDir}/classes/main${File.pathSeparator}${project(':core').buildDir}/classes/main")
        }
//        ant.javah(class: "net.java.games.input.DummyWindow", outputFile: "${buildDir}/generated/includes/net_java_games_input_DummyWindow.h", classpath: "${buildDir}/classes/main")
//        ant.javah(class: "net.java.games.input.IDirectInputEffect", outputFile: "${buildDir}/generated/includes/net_java_games_input_IDirectInputEffect.h", classpath: "${buildDir}/classes/main")
//        ant.javah(class: "net.java.games.input.DummyWindow", outputFile: "${buildDir}/generated/includes/net_java_games_input_IDirectInput.h", classpath: "${buildDir}/classes/main")
//        ant.javah(class: "net.java.games.input.DummyWindow", outputFile: "${buildDir}/generated/includes/net_java_games_input_IDirectInputDevice.h", classpath: "${buildDir}/classes/main")
//        ant.javah(class: "net.java.games.input.DummyWindow", outputFile: "${buildDir}/generated/includes/net_java_games_input_RawInputEnvironmentPlugin.h", classpath: "${buildDir}/classes/main")
//        ant.javah(class: "net.java.games.input.DummyWindow", outputFile: "${buildDir}/generated/includes/net_java_games_input_RawInputEventQueue.h", classpath: "${buildDir}/classes/main")
//        ant.javah(class: "net.java.games.input.DummyWindow", outputFile: "${buildDir}/generated/includes/net_java_games_input_RawDevice.h", classpath: "${buildDir}/classes/main")
    }
}

assemble.dependsOn javah

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
    compile 'net.java.jutils:jutils:1.0.0'
    compile project(':core')
    compile project(':plugins:common')
}
